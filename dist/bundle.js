(()=>{"use strict";class t extends HTMLElement{connectedCallback(){this.innerHTML="<header><h1>Notes App</h1></header>"}}customElements.define("note-header",t);class e extends HTMLElement{connectedCallback(){this.innerHTML="<footer><p>Â© 2025 Notes App</p></footer>"}}customElements.define("note-footer",e);class n extends HTMLElement{connectedCallback(){this.innerHTML='\n            <section id="note-form">\n                <h2>Tambah Catatan</h2>\n                <form id="add-note-form">\n                    <input type="text" id="note-title" placeholder="Judul" required>\n                    <textarea id="note-body" placeholder="Isi catatan" required></textarea>\n                    <button type="submit">Tambah</button>\n                </form>\n            </section>\n        ';const t=this.querySelector("#add-note-form");t.addEventListener("submit",(e=>{e.preventDefault();const n=this.querySelector("#note-title").value,o=this.querySelector("#note-body").value;if(n&&o){const e={title:n,body:o,createdAt:(new Date).toISOString(),archived:!1};this.addNoteToAPI(e),t.reset()}}))}async addNoteToAPI(t){try{const e=await fetch("https://notes-api.dicoding.dev/v2/notes",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(!e.ok)throw new Error("Failed to add note");await e.json(),document.querySelector("note-list").fetchNotes()}catch(t){console.error("Error adding note:",t)}}}customElements.define("note-form",n);class o extends HTMLElement{set noteData(t){this._noteData=t,this.render()}render(){this._noteData&&(this.innerHTML=`\n            <div class="note-item">\n                <h3>${this._noteData.title}</h3>\n                <p>${this._noteData.body}</p>\n                <small>Dibuat pada: ${new Date(this._noteData.createdAt).toLocaleDateString()}</small>\n                <div class="buttons">\n                    <button class="edit-btn">Edit</button>\n                    <button class="delete-btn">Hapus</button>\n                </div>\n            </div>\n        `,this.querySelector(".delete-btn").addEventListener("click",(()=>{this.deleteNoteFromAPI()})),this.querySelector(".edit-btn").addEventListener("click",(()=>{document.getElementById("note-title").value=this._noteData.title,document.getElementById("note-body").value=this._noteData.body,this.remove()})))}async deleteNoteFromAPI(){try{if(!(await fetch(`https://notes-api.dicoding.dev/v2/notes/${this._noteData.id}`,{method:"DELETE"})).ok)throw new Error("Failed to delete note");this.remove()}catch(t){console.error("Error deleting note:",t)}}}customElements.define("note-item",o);class s extends HTMLElement{constructor(){super(),this.notesData=[]}connectedCallback(){this.fetchNotes()}async fetchNotes(){try{const t=await fetch("https://notes-api.dicoding.dev/v2/notes");if(!t.ok)throw new Error("Failed to fetch notes");const e=await t.json();this.notesData=e.data,this.render()}catch(t){console.error("Error fetching notes:",t)}}render(){this.innerHTML='\n            <section id="notes-container">\n                <h2>Daftar Catatan</h2>\n                <div id="notes-grid"></div>\n            </section>\n        ',this.notesGrid=this.querySelector("#notes-grid"),this.notesData.forEach((t=>{const e=document.createElement("note-item");e.noteData=t,this.notesGrid.appendChild(e)}))}addNote(t){t.id=`notes-${Date.now()}`,this.notesData.push(t);const e=document.createElement("note-item");e.noteData=t,this.notesGrid.appendChild(e)}}customElements.define("note-list",s)})();